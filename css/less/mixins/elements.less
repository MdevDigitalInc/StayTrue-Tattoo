///*---------------------------------------------------
//    LESS Elements 0.9
//  ---------------------------------------------------
//    A set of useful LESS mixins
//    More info at: http://lesselements.com
//  ---------------------------------------------------*/


.gradient(@color: #F5F5F5, @start: #EEE, @stop: #FFF) {
  background: @color;
  background: -webkit-gradient(linear,
                               left bottom,
                               left top,
                               color-stop(0, @start),
                               color-stop(1, @stop));
  background: -ms-linear-gradient(bottom,
                                  @start,
                                  @stop);
  background: -moz-linear-gradient(center bottom,
                                   @start 0%,
                                   @stop 100%);
  background: -o-linear-gradient(@stop,
                                 @start);
  filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@stop,@start));
}

.radial-gradient(@shape: ellipse, @corePosition: farthest-corner, @x:50%, @y:50%, @startColor:black, @endColor:white){

  background: -webkit-radial-gradient(@shape @corePosition at @x @y, @startColor, @endColor); /* Safari 5.1 to 6.0 */
  background: -o-radial-gradient(@shape @corePosition at @x @y, @startColor, @endColor); /* For Opera 11.6 to 12.0 */
  background: -moz-radial-gradient(@shape @corePosition at @x @y, @startColor, @endColor); /* For Firefox 3.6 to 15 */
  background: radial-gradient(@shape @corePosition at @x @y, @startColor, @endColor); /* Standard syntax (must be last) */

}

.bw-gradient(@color: #F5F5F5, @start: 0, @stop: 255) {
  background: @color;
  background: -webkit-gradient(linear,
                               left bottom,
                               left top,
                               color-stop(0, rgb(@start,@start,@start)),
                               color-stop(1, rgb(@stop,@stop,@stop)));
  background: -ms-linear-gradient(bottom,
                                  rgb(@start,@start,@start) 0%,
                                  rgb(@stop,@stop,@stop) 100%);
  background: -moz-linear-gradient(center bottom,
                                   rgb(@start,@start,@start) 0%,
                                   rgb(@stop,@stop,@stop) 100%);
  background: -o-linear-gradient(rgb(@stop,@stop,@stop),
                                 rgb(@start,@start,@start));
  filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",rgb(@stop,@stop,@stop),rgb(@start,@start,@start)));
}
.bordered(@top-color: #EEE, @right-color: #EEE, @bottom-color: #EEE, @left-color: #EEE) {
  border-top: solid 1px @top-color;
  border-left: solid 1px @left-color;
  border-right: solid 1px @right-color;
  border-bottom: solid 1px @bottom-color;
}
.drop-shadow(@x-axis: 0, @y-axis: 1px, @blur: 2px, @alpha: 0.1) {
  -webkit-box-shadow: @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
  -moz-box-shadow: @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
  box-shadow: @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
}

.drop-shadow-color(@x-axis: 0, @y-axis: 1px, @blur: 2px, @color) {
  -webkit-box-shadow: @x-axis @y-axis @blur @color;
  -moz-box-shadow: @x-axis @y-axis @blur @color;
  box-shadow: @x-axis @y-axis @blur @color;
}

.rounded(@radius: 2px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  border-radius: @radius;
}
.border-radius(@topright: 0, @bottomright: 0, @bottomleft: 0, @topleft: 0) {
  -webkit-border-top-right-radius: @topright;
  -webkit-border-bottom-right-radius: @bottomright;
  -webkit-border-bottom-left-radius: @bottomleft;
  -webkit-border-top-left-radius: @topleft;
  -moz-border-radius-topright: @topright;
  -moz-border-radius-bottomright: @bottomright;
  -moz-border-radius-bottomleft: @bottomleft;
  -moz-border-radius-topleft: @topleft;
  border-top-right-radius: @topright;
  border-bottom-right-radius: @bottomright;
  border-bottom-left-radius: @bottomleft;
  border-top-left-radius: @topleft;
  .background-clip(padding-box);
}
.opacity(@opacity: 0.5) {
  -moz-opacity: @opacity;
  -khtml-opacity: @opacity;
  -webkit-opacity: @opacity;
  opacity: @opacity;
  @opperc: @opacity * 100;
  -ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=@{opperc})";
  filter: ~"alpha(opacity=@{opperc})";
}

//.transition (@transition) {
//  -webkit-transition: @transition;
//  -moz-transition:    @transition;
//  -ms-transition:     @transition;
//  -o-transition:      @transition;
//}

.transform(...) {
  -webkit-transform: @arguments;
  -moz-transform: @arguments;
  -o-transform: @arguments;
  -ms-transform: @arguments;
  transform: @arguments;
}
.rotation(@deg:5deg){
  .transform(rotateZ(@deg));
}//rotates on center axis

.flip(@deg:5deg){
  .transform(rotateX(@deg));
}//Flips it left to right

.flop(@deg:5deg){
  .transform(rotateY(@deg));
}//Flop flips it top to bottom

.scale3d(@x:0, @y:0, @z:0){
  .transform(scale(@x,@y,@z));
}

.scale(@ratio:1.5){
  .transform(scale(@ratio));
}

.translate(@x:0, @y:0, @z:0) {
  .transform(translate3d(@x,@y,@z));
}

.transition(@duration:0.2s, @ease:ease-in-out) {
  -webkit-transition: all @duration @ease;
  -moz-transition: all @duration @ease;
  -o-transition: all @duration @ease;
  transition: all @duration @ease;
}

.transition-duration(@duration: 0.2s) {
  -moz-transition-duration: @duration;
  -webkit-transition-duration: @duration;
  -o-transition-duration: @duration;
  transition-duration: @duration;
}
.inner-shadow(@horizontal:0, @vertical:1px, @blur:2px, @alpha: 0.4) {
  -webkit-box-shadow: inset @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
  -moz-box-shadow: inset @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
  box-shadow: inset @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
}
.box-shadow(@arguments) {
  -webkit-box-shadow: @arguments;
  -moz-box-shadow: @arguments;
  box-shadow: @arguments;
}
.box-sizing(@sizing: border-box) {
  -ms-box-sizing: @sizing;
  -moz-box-sizing: @sizing;
  -webkit-box-sizing: @sizing;
  box-sizing: @sizing;
}
.user-select(@argument: none) {
  -webkit-user-select: @argument;
  -moz-user-select: @argument;
  -ms-user-select: @argument;
  user-select: @argument;
}
.columns(@colwidth: 250px, @colcount: 0, @colgap: 50px, @columnRuleColor: #EEE, @columnRuleStyle: solid, @columnRuleWidth: 1px) {
  -moz-column-width: @colwidth;
  -moz-column-count: @colcount;
  -moz-column-gap: @colgap;
  -moz-column-rule-color: @columnRuleColor;
  -moz-column-rule-style: @columnRuleStyle;
  -moz-column-rule-width: @columnRuleWidth;
  -webkit-column-width: @colwidth;
  -webkit-column-count: @colcount;
  -webkit-column-gap: @colgap;
  -webkit-column-rule-color: @columnRuleColor;
  -webkit-column-rule-style: @columnRuleStyle;
  -webkit-column-rule-width: @columnRuleWidth;
  column-width: @colwidth;
  column-count: @colcount;
  column-gap: @colgap;
  column-rule-color: @columnRuleColor;
  column-rule-style: @columnRuleStyle;
  column-rule-width: @columnRuleWidth;
}

.filter(@filter-string){
  -webkit-filter: @filter-string;
  -moz-filter: @filter-string;
  -o-filter: @filter-string;
  -ms-filter: @filter-string;
  filter: @filter-string;
}//filter



.background-clip(@argument: padding-box) {
  -moz-background-clip: @argument;
  -webkit-background-clip: @argument;
  background-clip: @argument;
}

.noselect() {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.nopad {
  padding: 0;
}
.grayscale(...) {
  -webkit-filter: grayscale(@arguments);
  -moz-filter: grayscale(@arguments);
  -ms-filter: grayscale(@arguments);
  -o-filter: grayscale(@arguments);
  filter: grayscale(@arguments);
}//Grayscale
// Responsive utilities
// -------------------------
// More easily include all the states for responsive-utilities.less.
.responsive-visibility() {
  display: block !important;
  table&  { display: table; }
  tr&     { display: table-row !important; }
  th&,
  td&     { display: table-cell !important; }
}

.responsive-invisibility() {
  &,
  tr&,
  th&,
  td& { display: none !important; }
}
//--------------------------------------------//
//             Responsive Mixins
//--------------------------------------------//
//
//[USAGE]
//          #dat-element {
//            //Mobile Styles go here..
//            ...Style...
//
//            @media(@xs) {
//              ...Style...
//            }//Phablet
//
//            @media(@sm) {
//              ...Style...
//            }//Tablet
//
//            @media(@md) {
//              ...Style...
//            }//Laptop
//
//            @media(@lg) {
//              ...Style...
//            }//Desktop
//
//          }//#dat-element
//This mixin allows you to quickly create media queries within a given element or class.
//Because this is based on a mobile-first approach the root level styles ( ones not belonging to @media )
//Are the ones which will apply at the SMALLEST SCREEN SIZE. - NOTE - They will also cascade down and overwrite
//Any styles that are not addressed within the media queries.

// REMINDER - ROOT LEVEL (#dat-emenet{...Style...}) Applies to SMALLES SCREEN SIZE + Cascades
//
//@media @xs { ... }

@xs: ~'(min-width: @{screen-xs-min}) and (max-width: @{screen-xs-max})';
@sm: ~'(min-width: @{screen-sm-min}) and (max-width: @{screen-sm-max})';
@md: ~'(min-width: @{screen-md-min}) and (max-width: @{screen-md-max})';
@lg: ~'(min-width: @{screen-lg-min})';
